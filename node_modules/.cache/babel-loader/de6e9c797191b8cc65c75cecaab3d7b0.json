{"ast":null,"code":"var _jsxFileName = \"/Users/seexiong/Desktop/Code/memeGenerator/src/components/MemeGenerator.js\";\nimport React, { Component } from 'react';\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const memes = response.data.memes;\n      console.log(memes);\n      this.setState({\n        allMemeImgs: memes\n      });\n    });\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); // get random int (index of allMemeImgs)\n\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length); // get '.url' of that index\n\n    const randMeme = this.state.allMemeImgs[randNum].url; // set the randomImg to that '.url'\n\n    this.setState({\n      randomImg: randMeme\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"meme-form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"topText\",\n      placeholder: \"top text\",\n      value: this.state.topText,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"bottomText\",\n      placeholder: \"bottom text\",\n      value: this.state.bottomText,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Gen\")), React.createElement(\"div\", {\n      className: \"meme\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.randomImg,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.state.topText), React.createElement(\"h2\", {\n      className: \"bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.bottomText)));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/seexiong/Desktop/Code/memeGenerator/src/components/MemeGenerator.js"],"names":["React","Component","MemeGenerator","constructor","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","componentDidMount","fetch","then","response","json","memes","data","console","log","setState","event","target","name","value","preventDefault","randNum","Math","floor","random","length","randMeme","url","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs: []\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const { memes } = response.data\n                console.log(memes)\n                this.setState({ allMemeImgs: memes })\n            })\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target\n        this.setState({ [name]: value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        // get random int (index of allMemeImgs)\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        // get '.url' of that index\n        const randMeme = this.state.allMemeImgs[randNum].url\n        // set the randomImg to that '.url'\n        this.setState({ randomImg: randMeme })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                    <input\n                        type=\"text\"\n                        name=\"topText\"\n                        placeholder=\"top text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    />\n\n                    <input\n                        type=\"text\"\n                        name=\"bottomText\"\n                        placeholder=\"bottom text\"\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    />\n\n                    <button>Gen</button>\n                </form>\n\n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default MemeGenerator"]},"metadata":{},"sourceType":"module"}